{"mappings":"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","sources":["src/sockets/lis.js","src/sockets/state.js","src/sockets/dom.js","src/sockets/refresh.js","src/sockets/setup.js"],"sourcesContent":["// DEFINED ALIASES FOR SOME COMMON LONG NAMED FUNCTIONS\r\nexport const LIS = {\r\n    id: function (id) {\r\n        return document.getElementById(id)\r\n    },\r\n    elements: function (className) {\r\n        return document.querySelectorAll(`.${className}`)\r\n    },\r\n    remove: function (id) {\r\n        document.getElementById(id).parentNode.removeChild(document.getElementById(id))\r\n    },\r\n    classExists: function (classNames) {\r\n        return classNames.every((className) => {\r\n            return document.getElementsByClassName(className).length > 0\r\n        })\r\n    },\r\n    anyClassExists: function (classNames) {\r\n        return classNames.some((className) => {\r\n            return document.getElementsByClassName(className).length > 0\r\n        })\r\n    },\r\n}","export const clientSocket = {\r\n    notesChannel: __channel__,\r\n    addressedChannel: __channel__,\r\n    addressedId: __channel__.slice(0, 8) + __channel__.slice(-2),\r\n    thread: __id__,\r\n    sockets: [],\r\n    messages: {},\r\n}","import { LIS } from './lis.js'\r\nimport { newSocket } from './refresh.js'\r\nimport { clientSocket } from './state.js'\r\n\r\nconst { addressedChannel, addressedId, messages, sockets } = clientSocket\r\nconst list = LIS.id('message-list')\r\nconst id = (channel) => channel.slice(0, 8) + channel.slice(-2)\r\nconst append = (msg) => {\r\n    const li = document.createElement('li')\r\n    li.innerHTML = `<b>${msg.sender}:&nbsp;</b>${msg.message}`\r\n    list.appendChild(li)\r\n}\r\n// On click event and having the complete list\r\n// focus the channel clicked and un-focus others.\r\n// localStorage -> messages -> UI\r\nexport const channelSelect = (channel, ul) => {\r\n    return function (event) {\r\n        let lies = ul.getElementsByTagName('li')\r\n        for (var i = 0; i < lies.length; ++i) {\r\n            lies[i].innerHTML = lies[i].innerHTML.replace('<b>', '').replace('</b>', '')\r\n        }\r\n        let li = event.target\r\n        li.innerHTML = `<b>${li.innerHTML}</b>`\r\n        addressedChannel = channel\r\n        addressedId = id(channel)\r\n        if (localStorage.getItem(addressedId))\r\n            messages[addressedId].push(JSON.parse(localStorage.getItem(addressedId)))\r\n        // Make socket, fill messages and append\r\n        if (!sockets[addressedId]) newSocket()\r\n        else {\r\n            // get earlier messages and append\r\n            messages[addressedId].forEach((message) => {\r\n                append(message)\r\n            })\r\n        }\r\n    }\r\n}","import { LIS } from './lis.js'\r\nimport { channelSelect } from './dom.js'\r\nimport { clientSocket } from './state.js'\r\n\r\nconst { addressedChannel, addressedId, notesChannel, sockets, thread, messages } = clientSocket\r\nconst list = LIS.id('message-list')\r\nconst id = (channel) => channel.slice(0, 8) + channel.slice(-2)\r\nconst append = (msg) => {\r\n    const li = document.createElement('li')\r\n    li.innerHTML = `<b>${msg.sender}:&nbsp;</b>${msg.message}`\r\n    list.appendChild(li)\r\n}\r\nconst endpoint = `ws://${window.location.host}/chat/ping/?channel=`\r\n\r\n// Create new Socket: assumes localStorage & messages does not contain earlier messages (discarded)\r\nexport const newSocket = () => {\r\n    try {\r\n        sockets[addressedId] = new WebSocket(endpoint + addressedChannel)\r\n        sockets[addressedId].onerror = function (error) {\r\n            console.log(error)\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n        return false\r\n    }\r\n\r\n    // message -> messages -> localStorage\r\n    // message -> UI\r\n    sockets[addressedId].onmessage = (response) => {\r\n        try {\r\n            let message = JSON.parse(response.data)\r\n            if (!messages[addressedId]) messages[addressedId] = [message]\r\n            else messages[addressedId].push(message)\r\n            localStorage.setItem(addressedId, JSON.stringify(messages[addressedId]))\r\n            append(message)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    // Sender UI is treated as other users. He/She will we receiving messages by socket server \r\n    LIS.id('messenger').addEventListener('keyup', (e) => {\r\n        if (e.key === 'Enter' /* || e.keyCode === 13 */) {\r\n            sockets[addressedId].send(JSON.stringify({ message: e.target.value }))\r\n            e.target.value = ''\r\n        }\r\n    })\r\n    return true\r\n}\r\n/**\r\n * GET one new channel at least or all channels for the current logged viewer.\r\n * If the viewer is author, then gets all channels for the current thread (other viewers)\r\n * If not, then get the unique channel between the viewer and the author for the current thread\r\n */\r\nexport const getChannels = () => {\r\n    const channels = LIS.id('channels')\r\n    if (channels) {\r\n        fetch(`/secrets/id/${thread}/channels`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                let ul = LIS.id('channels box')\r\n                data.channels.forEach((channel) => {\r\n                    let li = document.createElement('li')\r\n                    if (channel === notesChannel) li.style = 'color: red'\r\n                    li.appendChild(document.createTextNode(id(channel)))\r\n                    li.addEventListener('click', channelSelect(channel, ul), false)\r\n                    ul.appendChild(li)\r\n                })\r\n                data.readableChannels.forEach((channel) => {\r\n                    let li = document.createElement('li')\r\n                    if (channel === notesChannel) li.style = 'color: red'\r\n                    li.appendChild(document.createTextNode(id(channel)))\r\n                    li.addEventListener('click', channelSelect(channel, ul), false)\r\n                    ul.appendChild(li)\r\n                })\r\n                console.log(`channels ${data}`)\r\n            })\r\n    }\r\n}\r\n\r\nexport const recoverState = () => {}","import { getChannels, newSocket, recoverState } from './refresh.js'\r\n\r\nrecoverState()\r\nif (newSocket()) getChannels()"],"names":["$6f277b603c697a24$export$239d84448f8421f6","id","_id","document","getElementById","elements","className","querySelectorAll","concat","remove","parentNode","removeChild","classExists","classNames","every","getElementsByClassName","length","anyClassExists","some","$88b22f775228c728$export$de68ec596acfe859","notesChannel","__channel__","addressedChannel","addressedId","slice","thread","__id__","sockets","messages","$b2a3867dbee692fc$var$addressedId","$b2a3867dbee692fc$var$messages","$b2a3867dbee692fc$var$sockets","$b2a3867dbee692fc$var$list","$b2a3867dbee692fc$export$3200aa7b52e20d6d","channel","ul","event","lies","getElementsByTagName","i","innerHTML","replace","li","target","$b2a3867dbee692fc$var$id","localStorage","getItem","push","JSON","parse","forEach","message","msg","createElement","sender","appendChild","$b2a3867dbee692fc$var$append","$630f385d601972f6$export$834bbc0440d868ca","$630f385d601972f6$var$addressedChannel","$630f385d601972f6$var$addressedId","$630f385d601972f6$var$notesChannel","$630f385d601972f6$var$sockets","$630f385d601972f6$var$thread","$630f385d601972f6$var$messages","$630f385d601972f6$var$list","$630f385d601972f6$var$id","$630f385d601972f6$var$endpoint","window","location","host","WebSocket","onerror","error","console","log","onmessage","response","data","setItem","stringify","addEventListener","e","key","send","value","fetch","then","json","channels","style","createTextNode","readableChannels"],"version":3,"file":"setup.js.map"}